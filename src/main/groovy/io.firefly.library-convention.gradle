plugins {
    id 'java-library'
    id 'maven-publish'
    id 'project-report'
    id 'io.firefly.jacoco-convention'
    id 'io.firefly.license-conversion'
    id 'io.firefly.dependency-updates'
    id 'io.firefly.mutation-test-convention'
    id 'com.avast.gradle.docker-compose'
    id 'com.github.hierynomus.license'
    id 'com.github.spotbugs'
    id "nebula.dependency-recommender"
    id 'net.linguica.maven-settings' apply false
}

group 'io.firefly'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: "${slf4jVersion}"

    compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitJupiterVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitJupiterVersion}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitJupiterVersion}"
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "${junitJupiterVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertJVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
}

configurations {
    commonBom
    compileOnly.extendsFrom(commonBom)
    annotationProcessor.extendsFrom(commonBom)
    testCompileOnly.extendsFrom(commonBom)
    testAnnotationProcessor.extendsFrom(commonBom)
    implementation.extendsFrom(commonBom)
    testFixturesImplementation.extendsFrom(commonBom)
}

compileJava {
    options.compilerArgs << "-Werror"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xlint:-try"
    options.compilerArgs << "-Xlint:-processing"
}

test {
    useJUnitPlatform()
}

spotbugsMain {
    reports {
        xml.enabled false
        html.enabled true
    }
}

spotbugsTest {
    reports {
        xml.enabled false
        html.enabled true
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/sebeard/firefly-service-framework")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_PACKAGES_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId project.group
            from components.java
            artifact sourcesJar
        }
    }
}


configurations.implementation.setCanBeResolved(true)
configurations.testImplementation.setCanBeResolved(true)
