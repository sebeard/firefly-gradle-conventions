plugins {
    id 'groovy-gradle-plugin'
    id 'maven-publish'
    id 'com.github.jmongard.git-semver-plugin'
    id 'org.owasp.dependencycheck'
    id 'com.github.ben-manes.versions'
    id 'org.sonarqube'
}

repositories {
    gradlePluginPortal()
}

group = 'io.firefly'
version semver.version

semver {
    releaseTagNameFormat = "v%s"
}

dependencies {
    implementation group: 'com.avast.gradle.docker-compose', name: 'com.avast.gradle.docker-compose.gradle.plugin', version: "${dockerComposePluginVersion}"
    implementation group: 'com.github.ben-manes.versions', name: 'com.github.ben-manes.versions.gradle.plugin', version: "${versionsPluginVersion}"
    implementation group: 'com.github.spotbugs', name: 'com.github.spotbugs.gradle.plugin', version: "${spotbugsPluginVersion}"
    implementation group: 'gradle.plugin.com.hierynomus.gradle.plugins', name: 'license-gradle-plugin', version: "${licensePluginVersion}"
    implementation group: 'gradle.plugin.com.github.jmongard.git-semver-plugin', name: 'git-semver-plugin', version: "${semanticVersioningPluginVersion}"
    implementation group: 'info.solidsoft.pitest', name: 'info.solidsoft.pitest.gradle.plugin', version: "${pitestPluginVersion}"
    implementation group: 'nebula.dependency-recommender', name: 'nebula.dependency-recommender.gradle.plugin', version: "${dependencyRecommenderVersion}"
    implementation group: 'net.linguica.maven-settings', name: 'net.linguica.maven-settings.gradle.plugin', version: "${linguicaVersion}"
    implementation group: 'org.owasp.dependencycheck', name: 'org.owasp.dependencycheck.gradle.plugin', version: "${dependencyCheckPluginVersion}"
    implementation group: 'org.sonarqube', name: 'org.sonarqube.gradle.plugin', version: "${sonarqubePluginVersion}"
}
}

dependencyCheck {
    failOnError = false
    format = 'ALL'
    cveValidForHours = 4
    suppressionFile = "$project.rootDir/suppressions.xml"
}
tasks.check.dependsOn dependencyCheckAggregate

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
tasks.build.dependsOn dependencyUpdates

sonarqube {
    properties {
        property "sonar.projectKey", "gradle-conventions"
        property "sonar.projectNamre", "gradle-conventions"
        property "sonar.exclusions", "**/build/generated/**,"
        property "sonar.coverage.exclusions", "**/src/test/**"
        property "sonar.coverage.jacoco.xmlReportPaths", ["${project.buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"]
        property "sonar.dependencyCheck.reportPath", "$project.buildDir/reports/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "$project.buildDir/reports/dependency-check-report.html"
        property "dc5.mutationAnalysis.pitest.sensor.reports.directory", "build/reports/pitest"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/sebeard/firefly-gradle-conventions")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_PACKAGES_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId project.group
            from components.java
        }
    }
}

tasks.named('publish') {
    dependsOn('check')
}
